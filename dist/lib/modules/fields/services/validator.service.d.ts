import { Validators } from '@angular/forms';
interface ValidatorData {
    name: string;
    value?: any;
}
export declare class ValidatorService {
    protected _validatorsMapping: {
        maxlength: any;
        minlength: any;
        pattern: any;
        required: any;
        arrayLength: any;
        base64: any;
        creditCard: any;
        date: any;
        dateISO: any;
        digits: any;
        email: any;
        equal: any;
        notEqual: any;
        equalTo: any;
        notEqualTo: any;
        lt: any;
        gte: any;
        json: any;
        lte: any;
        max: any;
        maxDate: any;
        min: any;
        minDate: any;
        number: any;
        property: any;
        range: any;
        rangeLength: any;
        url: any;
        uuid: any;
    };
    protected _validationMessageMapping: {
        maxlength: string;
        minlength: string;
        pattern: string;
        required: string;
        arrayLength: string;
        base64: string;
        creditCard: string;
        date: string;
        dateISO: string;
        digits: string;
        email: string;
        equal: string;
        notEqual: string;
        equalTo: string;
        notEqualTo: string;
        lt: string;
        gte: string;
        json: string;
        lte: string;
        max: string;
        maxDate: string;
        min: string;
        minDate: string;
        number: string;
        property: string;
        range: string;
        rangeLength: string;
        url: string;
        uuid: string;
    };
    getMaxlengthValidator(value: any): import("@angular/forms").ValidatorFn;
    getMinlengthValidator(value: any): import("@angular/forms").ValidatorFn;
    getPatternValidator(value: any): import("@angular/forms").ValidatorFn;
    getRequiredValidator(value: any): typeof Validators.required;
    getArrayLengthValidator(value: any): import("@angular/forms").ValidatorFn;
    getBase64Validator(value: any): import("@angular/forms").ValidatorFn;
    getCreditCardValidator(value: any): import("@angular/forms").ValidatorFn;
    getDateValidator(value: any): import("@angular/forms").ValidationErrors;
    getDateISOValidator(value: any): import("@angular/forms").ValidatorFn;
    getDigitsValidator(value: any): import("@angular/forms").ValidatorFn;
    getEmailValidator(value: any): import("@angular/forms").ValidatorFn;
    getEqualValidator(value: any): import("@angular/forms").ValidatorFn;
    getEqualToValidator(value: any): import("@angular/forms").ValidatorFn;
    getLtValidator(value: any): import("@angular/forms").ValidatorFn;
    getGteValidator(value: any): import("@angular/forms").ValidatorFn;
    getJsonValidator(value: any): import("@angular/forms").ValidatorFn;
    getLteValidator(value: any): import("@angular/forms").ValidatorFn;
    getMaxValidator(value: any): import("@angular/forms").ValidatorFn;
    getMaxDateValidator(value: any): (maxInput: any) => import("@angular/forms").ValidatorFn;
    getMinValidator(value: any): import("@angular/forms").ValidatorFn;
    getMinDateValidator(value: any): import("@angular/forms").ValidatorFn;
    getNotEqualValidator(value: any): import("@angular/forms").ValidatorFn;
    getNotEqualToValidator(value: any): import("@angular/forms").ValidatorFn;
    getNumberValidator(value: any): import("@angular/forms").ValidatorFn;
    getPropertyValidator(value: any): import("@angular/forms").ValidatorFn;
    getRangeValidator(value: any): import("@angular/forms").ValidatorFn;
    getRangeLengthValidator(value: any): import("@angular/forms").ValidatorFn;
    getUrlValidator(value: any): import("@angular/forms").ValidatorFn;
    getUuidValidator(value: any): import("@angular/forms").ValidatorFn;
    getValidator(validatorData: ValidatorData): {
        messageDate: {
            name: string;
            message: any;
        };
        validationFn: any;
    };
    getErrorMessageData(validatorData: ValidatorData): {
        name: string;
        message: any;
    };
    protected _getValidationMessage(validatorData: ValidatorData): any;
}
export {};
