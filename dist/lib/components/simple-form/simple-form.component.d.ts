import { UtilService } from './../../services/util.service';
import { SchemaService } from './../../services/schema.service';
import { LoggerService } from './../../services/logger.service';
import { OnInit, AfterViewInit, SimpleChange, EventEmitter, ElementRef, Renderer2 } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { DefaultsService } from './../../services/defaults.service';
interface EventHandlerCallbackInterface {
    name: string;
    arguments?: any[];
    handlerFnOwner?: string;
}
export declare class SimpleFormComponent implements OnInit, AfterViewInit {
    protected _fb: FormBuilder;
    protected _schemaService: SchemaService;
    protected _logger: LoggerService;
    protected _utilService: UtilService;
    protected _defaults: DefaultsService;
    protected _elemRef: ElementRef;
    protected _renderer: Renderer2;
    schema: any;
    formComponent?: any;
    pageComponent: any;
    formData?: any;
    afterInit: EventEmitter<SimpleFormComponent>;
    afterGenerateForm: EventEmitter<SimpleFormComponent>;
    formGoup: FormGroup;
    code: string;
    instance: SimpleFormComponent;
    fieldsComponent: any;
    isCollapsed: boolean;
    protected _hidden: boolean;
    constructor(_fb: FormBuilder, _schemaService: SchemaService, _logger: LoggerService, _utilService: UtilService, _defaults: DefaultsService, _elemRef: ElementRef, _renderer: Renderer2);
    protected _initialize(): void;
    initialize(): void;
    ngAfterViewInit(): void;
    ngOnChanges(): void;
    protected _onChanges(): void;
    populateForm(formData: any): void;
    protected _afterViewInit(): void;
    protected _applyInlieCssBySelector(selector: string, cssStyle: any): void;
    ngOnInit(): void;
    protected _init(): void;
    protected _addFormControls(formGroup: FormGroup, formFieldsDef: any[]): void;
    protected _initFormGroup(): void;
    onParentFieldValueChange(parentFieldName: string, childFieldNameArr: string[], changes: SimpleChange): void;
    protected _getEventCallback(eventName: string, callbackData: EventHandlerCallbackInterface): any;
    eventHandler(ownerType: any, fnName: string, argsArr: any, ...restArgsArr: any[]): any;
    protected _getCallbackOwner(ownerType: string): any;
    readonly label: any;
    readonly helps: any;
    readonly fields: any;
    readonly buttons: any;
    readonly columns: any;
    readonly collapse: any;
    readonly hideLabel: any;
    readonly collapseBodyHidden: boolean;
    readonly valid: boolean;
    value: any;
    readonly order: any;
    readonly id: string;
    hidden: boolean;
    readonly onParentFieldValueChangeFn: any;
    disable: any;
    enable: any;
    readonly formRef: any;
}
export {};
